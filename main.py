# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IG0L3O4yFxba35fn-ISEZU9sL60dz32A
"""

from fastapi import FastAPI

from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import pickle
import json

app = FastAPI()
origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins = origins,
    allow_credentials = True,
    allow_methods = ["*"],
    allow_headers = ["*"]
)

class model_input(BaseModel):
   MDVPFo : float
   MDVPFhi : float
   MDVPFlo : float
   MDVPJitter : float
   MDVPJitter1 : float
   MDVPRAP : float
   MDVPPPQ : float
   JitterDDP : float
   MDVPShimmer : float
   MDVPShimmer1 : float
   ShimmerAPQ3 : float
   ShimmerAPQ5 : float
   MDVPAPQ : float
   ShimmerDDA : float
   NHR : float
   HNR : float
   RPDE : float
   DFA : float
   Spread1 : float
   Spread2 : float
   D2 : float
   PPE : float

# loading the saved model
my_model = pickle.load(open('parkinsons_model.sav','rb'))


@app.post('/parkinsons_detection')
def parkinsons_pred(input_parameters : model_input):

    input_data = input_parameters.json()
    input_dictionary = json.loads(input_data)

    mdFo = input_dictionary['MDVPFo']
    mdFhi = input_dictionary['MDVPFhi']
    mdFlo = input_dictionary['MDVPFlo']
    jit = input_dictionary['MDVPJitter']
    jit1 = input_dictionary['MDVPJitter1']
    mdRap = input_dictionary['MDVPRAP']
    mdPq = input_dictionary['MDVPPPQ']
    jitDdp = input_dictionary['JitterDDP']
    msSh = input_dictionary['MDVPShimmer']
    msSh1 = input_dictionary['MDVPShimmer1']
    sAP = input_dictionary['ShimmerAPQ3']
    sAP1 = input_dictionary['ShimmerAPQ5']
    mdPq1 = input_dictionary['MDVPAPQ']
    shDda = input_dictionary['ShimmerDDA']
    nhr = input_dictionary['NHR']
    hnr = input_dictionary['HNR']
    rpde = input_dictionary['RPDE']
    dfa = input_dictionary['DFA']
    sp1 = input_dictionary['Spread1']
    sp2 = input_dictionary['Spread2']
    d2 = input_dictionary['D2']
    ppe = input_dictionary['PPE']


    input_list = [mdFo, mdFhi, mdFlo, jit, jit1, mdRap, mdPq, jitDdp, msSh, msSh1,sAP, sAP1, mdPq1, shDda, nhr, hnr, rpde, dfa, sp1, sp2, d2, ppe]

    prediction = my_model.predict([input_list])

    if(prediction[0] == 0):
      return "The person doesn't have parkinsons disease"
    else:
      return "The person has parkinsons disease"
